extend type Query {
  """
  ✨ Look up a single `Company` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  company(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Company_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Company_FirstRow
  ): Company @fdc_generated(from: "Company", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Vehicle` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  vehicle(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Vehicle_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Vehicle_FirstRow
  ): Vehicle @fdc_generated(from: "Vehicle", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `WeighingSession` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  weighingSession(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: WeighingSession_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: WeighingSession_FirstRow
  ): WeighingSession @fdc_generated(from: "WeighingSession", purpose: QUERY_SINGLE)
  """
  ✨ List `Company` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  companies(
    """
    Filter condition to narrow down the query results.
    """
    where: Company_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Company_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Company_Having
  ): [Company!]! @fdc_generated(from: "Company", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Vehicle` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  vehicles(
    """
    Filter condition to narrow down the query results.
    """
    where: Vehicle_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Vehicle_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Vehicle_Having
  ): [Vehicle!]! @fdc_generated(from: "Vehicle", purpose: QUERY_MULTIPLE)
  """
  ✨ List `WeighingSession` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  weighingSessions(
    """
    Filter condition to narrow down the query results.
    """
    where: WeighingSession_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WeighingSession_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: WeighingSession_Having
  ): [WeighingSession!]! @fdc_generated(from: "WeighingSession", purpose: QUERY_MULTIPLE)
}
